<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>JavaScript Concepts Demonstration</title>
  <style>
    body { font-family: Arial; margin: 20px; background: #f9f9f9; }
    h1 { color: darkblue; }
    pre { background: #eef; padding: 10px; border-radius: 8px; }
    button { padding: 10px 15px; background: darkblue; color: white; border: none; border-radius: 5px; cursor: pointer; }
  </style>
</head>
<body>
  <h1>JavaScript Concepts Demonstration</h1>
  <button onclick="runProgram()">Run Program</button>
  <pre id="output"></pre>

  <script>
    function runProgram() {
      let out = "";

      // 1Ô∏è‚É£ VARIABLES & OPERATORS
      let a = 10, b = 5;
      let sum = a + b;
      let product = a * b;
      out += "1Ô∏è‚É£ Variables & Operators:\n";
      out += `a = ${a}, b = ${b}\n`;
      out += `Sum = ${sum}, Product = ${product}\n\n`;

      // 2Ô∏è‚É£ CONDITIONS
      out += "2Ô∏è‚É£ Conditions:\n";
      if (a > b) {
        out += "a is greater than b\n\n";
      } else {
        out += "b is greater than or equal to a\n\n";
      }

      // 3Ô∏è‚É£ LOOPS
      out += "3Ô∏è‚É£ Loops:\n";
      for (let i = 1; i <= 5; i++) {
        out += `Loop count: ${i}\n`;
      }
      out += "\n";

      // 4Ô∏è‚É£ FUNCTIONS
      out += "4Ô∏è‚É£ Functions:\n";
      function multiply(x, y) {
        return x * y;
      }
      out += `Multiplication (4 * 3): ${multiply(4, 3)}\n\n`;

      // 5Ô∏è‚É£ EVENTS (Handled by button click)
      out += "5Ô∏è‚É£ Events:\nThis program runs when you click the button!\n\n";

      // 6Ô∏è‚É£ CLASSES & OBJECTS
      out += "6Ô∏è‚É£ Classes & Objects:\n";
      class Student {
        constructor(name, marks) {
          this.name = name;
          this.marks = marks;
        }
        display() {
          return `${this.name} scored ${this.marks} marks.`;
        }
      }
      const s1 = new Student("Aman", 92);
      out += s1.display() + "\n\n";

      // 7Ô∏è‚É£ ERROR HANDLING
      out += "7Ô∏è‚É£ Error Handling:\n";
      try {
        let result = 10 / 0;
        if (!isFinite(result)) throw "Division by zero!";
      } catch (err) {
        out += "Error caught: " + err + "\n\n";
      }

      // 8Ô∏è‚É£ VALIDATION
      out += "8Ô∏è‚É£ Validation:\n";
      let email = "aman@example.com";
      let emailPattern = /^[^ ]+@[^ ]+\.[a-z]{2,3}$/;
      if (email.match(emailPattern)) {
        out += "Valid Email Address ‚úÖ\n\n";
      } else {
        out += "Invalid Email Address ‚ùå\n\n";
      }

      // 9Ô∏è‚É£ ARRAYS
      out += "9Ô∏è‚É£ Arrays:\n";
      let fruits = ["Apple", "Banana", "Cherry"];
      fruits.push("Mango");
      out += "Fruits: " + fruits.join(", ") + "\n\n";

      // üîü STRINGS
      out += "üîü Strings:\n";
      let str = "JavaScript Programming";
      out += `Original: ${str}\nUppercase: ${str.toUpperCase()}\nSubstring: ${str.substring(0, 10)}\n\n`;

      // 1Ô∏è‚É£1Ô∏è‚É£ DATE
      out += "1Ô∏è‚É£1Ô∏è‚É£ Date:\n";
      let today = new Date();
      out += `Today's Date: ${today.toDateString()}\nCurrent Time: ${today.toLocaleTimeString()}\n`;

      document.getElementById("output").textContent = out;
    }
  </script>
</body>
</html>




Execution Steps

Copy this code into Notepad or VS Code.

Save it as javascript_demo.html.

Open it in any web browser (Chrome, Edge, Firefox).

Click the ‚ÄúRun Program‚Äù button ‚Äî all outputs will appear in the box.






üñ•Ô∏è Option 1 ‚Äî Run in Browser (Recommended for this Experiment)

Because the program uses HTML and a button event:

‚úÖ Steps

Open Notepad or VS Code.

Copy the full code I gave you earlier.

Save the file as:

javascript_demo.html


Double-click the file (or right-click ‚Üí Open with ‚Üí Chrome / Edge).

You‚Äôll see a ‚ÄúRun Program‚Äù button.

Click it ‚Äî all JavaScript outputs will appear below it.

That‚Äôs the correct way to ‚Äúrun‚Äù this JavaScript in a web environment.

üíª Option 2 ‚Äî Run in Node.js (Command Line)

If you just want to test JavaScript logic (without HTML or button):

‚úÖ Steps

Install Node.js from https://nodejs.org
.

Open Command Prompt / Terminal.

Create a file, for example:

notepad demo.js


Copy only the JavaScript part (without HTML tags) into demo.js.

Run it using:

node demo.js


You‚Äôll see the output directly in the terminal.







<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript Concepts Demonstration</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h2 { color: #333; }
        .result { background-color: #f0f0f0; padding: 10px; margin: 10px 0; border: 1px solid #ccc; }
        button { padding: 10px; margin: 5px; }
        input { padding: 8px; margin: 5px; }
    </style>
</head>
<body>
    <h1>JavaScript Programming Concepts Demonstration</h1>
    <p>Open the browser console (F12) to see console.log outputs for non-interactive concepts.</p>

    <h2>1. Variables</h2>
    <div class="result" id="variables-result"></div>

    <h2>2. Operators</h2>
    <div class="result" id="operators-result"></div>

    <h2>3. Conditions</h2>
    <div class="result" id="conditions-result"></div>

    <h2>4. Loops</h2>
    <div class="result" id="loops-result"></div>

    <h2>5. Functions</h2>
    <div class="result" id="functions-result"></div>

    <h2>6. Events</h2>
    <button id="click-button">Click Me!</button>
    <input type="text" id="input-field" placeholder="Type something">
    <div class="result" id="events-result"></div>

    <h2>7. Classes and Objects</h2>
    <div class="result" id="classes-result"></div>

    <h2>8. Error Handling</h2>
    <div class="result" id="error-result"></div>

    <h2>9. Validations</h2>
    <input type="email" id="email-input" placeholder="Enter email">
    <button id="validate-button">Validate Email</button>
    <div class="result" id="validation-result"></div>

    <h2>10. Arrays</h2>
    <div class="result" id="arrays-result"></div>

    <h2>11. Strings</h2>
    <div class="result" id="strings-result"></div>

    <h2>12. Dates</h2>
    <div class="result" id="dates-result"></div>

    <script>
        // 1. Variables
        console.log("=== Variables ===");
        let name = "John";
        const age = 30;
        var isStudent = true;
        console.log(`Name: ${name}, Age: ${age}, Is Student: ${isStudent}`);
        document.getElementById('variables-result').innerText = `Name: ${name}, Age: ${age}, Is Student: ${isStudent}`;

        // 2. Operators
        console.log("=== Operators ===");
        let a = 10, b = 5;
        console.log(`Addition: ${a + b}, Subtraction: ${a - b}, Multiplication: ${a * b}, Division: ${a / b}`);
        console.log(`Comparison: ${a > b}, Equality: ${a === 10}`);
        document.getElementById('operators-result').innerText = `Addition: ${a + b}, Subtraction: ${a - b}, Multiplication: ${a * b}, Division: ${a / b}`;

        // 3. Conditions
        console.log("=== Conditions ===");
        if (age > 18) {
            console.log("Adult");
        } else {
            console.log("Minor");
        }
        let result = age > 18 ? "Adult" : "Minor";
        document.getElementById('conditions-result').innerText = `Age ${age}: ${result}`;

        // 4. Loops
        console.log("=== Loops ===");
        let loopResult = "";
        for (let i = 1; i <= 5; i++) {
            loopResult += i + " ";
        }
        console.log("For loop: " + loopResult);
        let j = 1;
        while (j <= 5) {
            console.log("While loop: " + j);
            j++;
        }
        document.getElementById('loops-result').innerText = "For loop: " + loopResult;

        // 5. Functions
        console.log("=== Functions ===");
        function greet(person) {
            return `Hello, ${person}!`;
        }
        console.log(greet("Alice"));
        const arrowGreet = (person) => `Hi, ${person}!`;
        console.log(arrowGreet("Bob"));
        document.getElementById('functions-result').innerText = greet("Alice") + " | " + arrowGreet("Bob");

        // 6. Events
        console.log("=== Events ===");
        document.getElementById('click-button').addEventListener('click', function() {
            document.getElementById('events-result').innerText = "Button clicked!";
            console.log("Button clicked!");
        });
        document.getElementById('input-field').addEventListener('input', function(event) {
            document.getElementById('events-result').innerText = `Input: ${event.target.value}`;
            console.log("Input changed: " + event.target.value);
        });

        // 7. Classes and Objects
        console.log("=== Classes and Objects ===");
        class Person {
            constructor(name, age) {
                this.name = name;
                this.age = age;
            }
            introduce() {
                return `I am ${this.name}, ${this.age} years old.`;
            }
        }
        let person = new Person("Charlie", 25);
        console.log(person.introduce());
        let obj = { name: "David", age: 28 };
        console.log(`Object: ${obj.name}, ${obj.age}`);
        document.getElementById('classes-result').innerText = person.introduce() + " | Object: " + obj.name;

        // 8. Error Handling
        console.log("=== Error Handling ===");
        try {
            let x = undefined;
            console.log(x.property); // This will throw an error
        } catch (error) {
            console.log("Error caught: " + error.message);
            document.getElementById('error-result').innerText = "Error caught: " + error.message;
        }

        // 9. Validations
        console.log("=== Validations ===");
        document.getElementById('validate-button').addEventListener('click', function() {
            let email = document.getElementById('email-input').value;
            let emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (emailRegex.test(email)) {
                document.getElementById('validation-result').innerText = "Valid email!";
                console.log("Valid email: " + email);
            } else {
                document.getElementById('validation-result').innerText = "Invalid email!";
                console.log("Invalid email: " + email);
            }
        });

        // 10. Arrays
        console.log("=== Arrays ===");
        let fruits = ["Apple", "Banana", "Cherry"];
        console.log("Array: " + fruits.join(", "));
        fruits.push("Date");
        console.log("After push: " + fruits.join(", "));
        let filtered = fruits.filter(fruit => fruit.length > 5);
        console.log("Filtered: " + filtered.join(", "));
        document.getElementById('arrays-result').innerText = "Array: " + fruits.join(", ");

        // 11. Strings
        console.log("=== Strings ===");
        let str = "Hello World";
        console.log("Uppercase: " + str.toUpperCase());
        console.log("Substring: " + str.substring(0, 5));
        console.log("Replace: " + str.replace("World", "JavaScript"));
        document.getElementById('strings-result').innerText = "Uppercase: " + str.toUpperCase() + " | Substring: " + str.substring(0, 5);

        // 12. Dates
        console.log("=== Dates ===");
        let now = new Date();
        console.log("Current date: " + now.toDateString());
        console.log("Time: " + now.toTimeString());
        let future = new Date(now.getTime() + 86400000); // Add 1 day
        console.log("Future date: " + future.toDateString());
        document.getElementById('dates-result').innerText = "Current date: " + now.toDateString();
    </script>
</body>
</html>



start js_concepts_demo.html
